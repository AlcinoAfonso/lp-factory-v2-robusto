// Edited by Codex
import { useState, useEffect } from 'react';  interface NutritionData {   calories: number;   protein: number;   carbs: number;   fat: number;   water: number; }  interface DailyGoals {   calories: number;   protein: number;   carbs: number;   fat: number;   water: number; }  export function useNutritionTracker(goals: DailyGoals) {   const [consumed, setConsumed] = useState<NutritionData>({     calories: 0,     protein: 0,     carbs: 0,     fat: 0,     water: 0   });    const [progress, setProgress] = useState({     calories: 0,     protein: 0,     carbs: 0,     fat: 0,     water: 0   });    useEffect(() => {     setProgress({       calories: Math.min((consumed.calories / goals.calories) * 100, 100),       protein: Math.min((consumed.protein / goals.protein) * 100, 100),       carbs: Math.min((consumed.carbs / goals.carbs) * 100, 100),       fat: Math.min((consumed.fat / goals.fat) * 100, 100),       water: Math.min((consumed.water / goals.water) * 100, 100)     });   }, [consumed, goals]);    const addNutrition = (nutrition: Partial<NutritionData>) => {     setConsumed(prev => ({       calories: prev.calories + (nutrition.calories || 0),       protein: prev.protein + (nutrition.protein || 0),       carbs: prev.carbs + (nutrition.carbs || 0),       fat: prev.fat + (nutrition.fat || 0),       water: prev.water + (nutrition.water || 0)     }));   };    const resetDaily = () => {     setConsumed({       calories: 0,       protein: 0,       carbs: 0,       fat: 0,       water: 0     });   };    return {     consumed,     progress,     goals,     addNutrition,     resetDaily   }; }
