name: Claude Deploy V2

on:
  workflow_dispatch:
    inputs:
      titulo:
        description: 'Título do PR'
        required: true
        type: string
      codigo:
        description: 'Cole aqui o código do Claude'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Configurar Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@users.noreply.github.com"
          
      - name: Criar Branch
        id: branch
        run: |
          BRANCH="claude-$(date +%s)"
          echo "name=$BRANCH" >> $GITHUB_OUTPUT
          git checkout -b $BRANCH
          
      - name: Processar Código
        run: |
          # Salva o código do Claude
          cat > input.txt << 'END_OF_INPUT'
          ${{ github.event.inputs.codigo }}
          END_OF_INPUT
          
          # Script Python para extrair arquivos - REGEX CORRIGIDO
          python3 << 'PYTHON_SCRIPT'
          import re
          import os
          
          with open('input.txt', 'r') as f:
              content = f.read()
          
          # MÚLTIPLOS PADRÕES DE REGEX - MUITO MAIS FLEXÍVEL
          patterns = [
              # Padrão 1: ```linguagem arquivo.ext
              r'```(\w+)\s+([\w\-/\.]+)\n(.*?)```',
              # Padrão 2: ```linguagem\ncodigo\n```
              r'```(\w+)\n(.*?)```',
              # Padrão 3: arquivo.ext\n```linguagem
              r'([\w\-/\.]+)\n```(\w+)\n(.*?)```',
              # Padrão 4: sem linguagem específica
              r'```\n(.*?)```',
              # Padrão 5: com path completo
              r'```[a-zA-Z]*\s*([a-zA-Z0-9\-_/\.]+)\n(.*?)```'
          ]
          
          count = 0
          
          # TESTA CADA PADRÃO ATÉ ENCONTRAR MATCHES
          for i, pattern in enumerate(patterns):
              print(f"🔍 Testando padrão {i+1}: {pattern}")
              
              if i == 1:  # Padrão sem arquivo específico
                  matches = re.findall(pattern, content, re.DOTALL)
                  for match in matches:
                      filepath = f"src/code-{count}.js"  # Nome genérico
                      code = match
                      
                      dirname = os.path.dirname(filepath)
                      if dirname:
                          os.makedirs(dirname, exist_ok=True)
                      
                      with open(filepath, 'w') as f:
                          f.write(code.strip())
                      
                      print(f"✅ Criado: {filepath}")
                      count += 1
                      
              elif i == 3:  # Padrão só código
                  if not count:  # Só se não achou nada ainda
                      matches = re.findall(pattern, content, re.DOTALL)
                      for match in matches:
                          filepath = f"src/extracted-{count}.js"
                          code = match
                          
                          dirname = os.path.dirname(filepath)
                          if dirname:
                              os.makedirs(dirname, exist_ok=True)
                          
                          with open(filepath, 'w') as f:
                              f.write(code.strip())
                          
                          print(f"✅ Criado: {filepath}")
                          count += 1
                          
              else:  # Padrões normais
                  matches = re.findall(pattern, content, re.DOTALL)
                  for match in matches:
                      if len(match) == 3:
                          lang, filepath, code = match
                      elif len(match) == 2:
                          if i == 2:  # arquivo primeiro
                              filepath, lang, code = match[0], match[1], match[2] if len(match) > 2 else match[1]
                          else:
                              filepath, code = match
                              
                      # Cria diretórios se necessário
                      dirname = os.path.dirname(filepath)
                      if dirname:
                          os.makedirs(dirname, exist_ok=True)
                      
                      # Salva o arquivo
                      with open(filepath, 'w') as f:
                          f.write(code.strip())
                      
                      print(f"✅ Criado: {filepath}")
                      count += 1
              
              if count > 0:
                  print(f"✅ Padrão {i+1} funcionou!")
                  break
          
          print(f"\n📁 Total: {count} arquivos criados")
          
          # Debug: mostra o conteúdo original
          print(f"\n🔍 Debug - Primeiras 500 chars do input:")
          print(content[:500])
          PYTHON_SCRIPT
          
      - name: Commit e Push
        run: |
          git add -A
          git status
          if git diff --staged --quiet; then
            echo "⚠️ Nenhum arquivo foi criado"
            exit 1
          else
            git commit -m "${{ github.event.inputs.titulo }}"
            git push origin ${{ steps.branch.outputs.name }}
          fi
          
      - name: Criar PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "${{ github.event.inputs.titulo }}" \
            --body "🤖 Código deployado via Claude Deploy V2

📊 **Arquivos processados:** Veja commits acima
🔧 **Regex melhorado:** Suporta múltiplos formatos
🎯 **Status:** Automático via GitHub Actions" \
            --base main \
            --head ${{ steps.branch.outputs.name }}
