name: Create LP from Structured Brief

on:
  issues:
    types: [opened]

jobs:
  create-lp-from-brief:
    if: startsWith(github.event.issue.title, '[LP]')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Extract and Process Brief
        id: process_brief
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = context.payload.issue.title;
            const issueBody = context.payload.issue.body;

            // Extrai nome do cliente e LP: [LP] cliente - nome-da-lp
            const match = issueTitle.match(/\[LP\]\s*(.+?)\s*-\s*(.+)/);
            if (!match) {
              throw new Error('Formato de t√≠tulo inv√°lido. Use: [LP] cliente - nome-da-lp');
            }
            
            const cliente = match[1].trim().toLowerCase().replace(/[^a-z0-9]/g, '-');
            const lpNome = match[2].trim().toLowerCase().replace(/[^a-z0-9]/g, '-');
            const slug = `${cliente}-${lpNome}`;

            console.log('üéØ Processando Brief estruturado...');
            console.log(`Cliente: ${cliente}`);
            console.log(`LP: ${lpNome}`);
            console.log(`Slug: ${slug}`);

            // Salva dados extra√≠dos
            core.setOutput('cliente', cliente);
            core.setOutput('lp_nome', lpNome);
            core.setOutput('slug', slug);
            core.setOutput('brief_content', issueBody);
            core.setOutput('branch_name', `lp-${slug}-${Date.now()}`);

      - name: Process Brief with Node.js
        run: |
          CLIENTE="${{ steps.process_brief.outputs.cliente }}"
          LP_NOME="${{ steps.process_brief.outputs.lp_nome }}"
          SLUG="${{ steps.process_brief.outputs.slug }}"
          BRIEF_CONTENT='${{ steps.process_brief.outputs.brief_content }}'

          echo "üìã Processando brief estruturado..."
          echo "Cliente: $CLIENTE"
          echo "LP: $LP_NOME"
          echo "Slug: $SLUG"

          # Cria estrutura de pastas
          LP_DIR="lps/${SLUG}"
          mkdir -p $LP_DIR

          # Processa brief estruturado usando Node.js
          cat > process_brief.js << 'EOF2'
          const fs = require('fs');
          
          // SIMULA√á√ÉO do processamento do brief
          // Na implementa√ß√£o real, aqui voc√™ usaria o BriefParser e LPGenerator
          
          function processBrief(briefContent) {
            const lines = briefContent.split('\n').map(line => line.trim()).filter(line => line);
            
            // Extrai dados b√°sicos
            const empresa = extractValue(lines, 'Empresa:') || 'Empresa';
            const objetivo = extractValue(lines, 'Objetivo da LP:') || 'Objetivo';
            const logoUrl = extractValue(lines, 'Logo (URL):') || '';
            const instagramUrl = extractValue(lines, 'Link Instagram:') || '';
            
            // Detecta se√ß√µes
            const sections = [];
            let currentSection = null;
            let sectionData = {};
            
            for (const line of lines) {
              // Detecta in√≠cio de se√ß√£o
              if (line.toLowerCase().includes('se√ß√£o') || 
                  ['header', 'hero', 'benefits', 'services', 'testimonials', 'steps', 'about', 'faq', 'ctafinal', 'footer'].includes(line.toLowerCase())) {
                
                // Salva se√ß√£o anterior
                if (currentSection) {
                  sections.push({
                    id: currentSection,
                    type: currentSection,
                    enabled: true,
                    ...sectionData
                  });
                }
                
                // Inicia nova se√ß√£o
                currentSection = getSectionType(line);
                sectionData = {};
                continue;
              }
              
              // Detecta se√ß√£o IA
              if (line.toLowerCase().trim() === 'ia') {
                sectionData.ai_generated = true;
                continue;
              }
              
              // Processa dados da se√ß√£o
              if (currentSection) {
                processLineForSection(line, sectionData);
              }
            }
            
            // Salva √∫ltima se√ß√£o
            if (currentSection) {
              sections.push({
                id: currentSection,
                type: currentSection,
                enabled: true,
                ...sectionData
              });
            }
            
            // Monta LP final
            const lpConfig = {
              metadata: {
                title: `${empresa} - ${objetivo}`,
                description: objetivo,
                favicon: '/favicon.ico'
              },
              sections: sections
            };
            
            return lpConfig;
          }
          
          function extractValue(lines, key) {
            const line = lines.find(l => l.includes(key));
            return line ? line.replace(key, '').trim() : '';
          }
          
          function getSectionType(line) {
            const cleanLine = line.toLowerCase().replace(/se√ß√£o|:/g, '').trim();
            const sectionMap = {
              'header': 'header',
              'hero': 'hero',
              'benefits': 'benefits', 
              'services': 'services',
              'testimonials': 'testimonials',
              'steps': 'steps',
              'about': 'about',
              'faq': 'faq',
              'ctafinal': 'ctaFinal',
              'footer': 'footer'
            };
            return sectionMap[cleanLine] || cleanLine;
          }
          
          function processLineForSection(line, sectionData) {
            // Header
            if (line.includes('Logo (URL):')) {
              sectionData.logo = { type: 'image', src: line.split(':')[1].trim(), alt: 'Logo' };
            } else if (line.includes('Menu') && line.includes('nome:')) {
              if (!sectionData.navigation) sectionData.navigation = [];
              sectionData.navigation.push({ label: line.split('nome:')[1].trim(), href: '' });
            } else if (line.includes('Menu') && line.includes('link:')) {
              if (sectionData.navigation && sectionData.navigation.length > 0) {
                sectionData.navigation[sectionData.navigation.length - 1].href = line.split('link:')[1].trim();
              }
            } else if (line.includes('Telefone (exibi√ß√£o):')) {
              if (!sectionData.phone) sectionData.phone = {};
              sectionData.phone.display = line.split(':')[1].trim();
            } else if (line.includes('Telefone (link')) {
              if (!sectionData.phone) sectionData.phone = {};
              sectionData.phone.link = 'tel:+' + line.split(':')[1].trim();
            }
            
            // Hero
            else if (line.includes('H1:')) {
              sectionData.title = line.replace('H1:', '').trim();
            } else if (line.includes('P:')) {
              sectionData.description = line.replace('P:', '').trim();
            } else if (line.includes('Imagem:')) {
              sectionData.image = { src: line.split(':')[1].trim(), alt: 'Hero Image' };
            } else if (line.includes('Bot√£o WhatsApp:')) {
              // Ser√° processado nas pr√≥ximas linhas
            } else if (line.includes('N√∫mero:')) {
              if (!sectionData.primaryButton) sectionData.primaryButton = {};
              const numero = line.split(':')[1].trim();
              sectionData.primaryButton.href = `https://wa.me/${numero}`;
            } else if (line.includes('Mensagem:')) {
              if (sectionData.primaryButton && sectionData.primaryButton.href) {
                const mensagem = line.split(':')[1].trim();
                sectionData.primaryButton.href += `?text=${encodeURIComponent(mensagem)}`;
              }
            } else if (line.includes('R√≥tulo:')) {
              if (!sectionData.primaryButton) sectionData.primaryButton = {};
              sectionData.primaryButton.text = line.split(':')[1].trim();
              sectionData.primaryButton.variant = 'primary';
            }
            
            // Services
            else if (line.includes('H2:')) {
              sectionData.title = line.replace('H2:', '').trim();
            } else if (line.startsWith('üß†') || line.startsWith('‚öñÔ∏è') || line.startsWith('üîÑ') || line.startsWith('üå±')) {
              if (!sectionData.items) sectionData.items = [];
              const icon = line.charAt(0);
              const text = line.substring(1).trim();
              sectionData.items.push({ icon, text });
            }
            
            // Testimonials
            else if (line.includes('youtube.com/watch')) {
              if (!sectionData.videos) sectionData.videos = [];
              const videoId = line.match(/v=([^&]+)/)?.[1];
              if (videoId) {
                sectionData.videos.push({
                  embedUrl: `https://www.youtube.com/embed/${videoId}`,
                  title: `Depoimento ${sectionData.videos.length + 1}`
                });
              }
            }
            
            // Steps
            else if (line.includes('H3:')) {
              if (!sectionData.steps) sectionData.steps = [];
              sectionData.steps.push({
                title: line.replace('H3:', '').trim(),
                description: ''
              });
            } else if (sectionData.steps && sectionData.steps.length > 0 && !line.includes('H3:') && !line.includes('H2:') && !line.includes('Bot√£o')) {
              // Adiciona descri√ß√£o ao √∫ltimo step
              if (line.trim()) {
                sectionData.steps[sectionData.steps.length - 1].description = line.trim();
              }
            }
            
            // About
            else if (line.includes('Quem √©')) {
              sectionData.title = line.trim();
            } else if (!line.includes(':') && line.length > 50 && !sectionData.description) {
              sectionData.description = line.trim();
            }
            
            // CTA Final
            else if (line.includes('Veja como')) {
              sectionData.title = line.trim();
            } else if (line.includes('O processo')) {
              sectionData.subtitle = line.trim();
            }
            
            // Footer
            else if (line.includes('Link Instagram:')) {
              sectionData.instagram = {
                url: line.split(':')[1].trim(),
                text: '@empresa'
              };
            } else if (line.includes('Small:') && line.includes('¬©')) {
              sectionData.copyright = line.replace('Small:', '').trim();
            } else if (line.includes('Link:') && line.includes('unicodigital')) {
              sectionData.legalLink = {
                href: line.split('Link:')[1].trim(),
                text: 'Termos de Uso e Privacidade'
              };
            }
            
            // Cores de fundo e texto
            if (line.includes('Cor do fundo:')) {
              const cor = line.split(':')[1].trim();
              if (cor.includes('#')) {
                sectionData.backgroundColor = cor.split('#')[1].split(' ')[0];
                sectionData.backgroundColor = '#' + sectionData.backgroundColor;
              }
            } else if (line.includes('Cor do Texto:')) {
              const cor = line.split(':')[1].trim();
              if (cor.includes('#')) {
                sectionData.textColor = cor.split('#')[1].split(' ')[0];
                sectionData.textColor = '#' + sectionData.textColor;
              }
            }
          }
          
          // Processa o brief
          const briefContent = process.env.BRIEF_CONTENT || '';
          const lpConfig = processBrief(briefContent);
          
          // Gera se√ß√µes IA (placeholder)
          lpConfig.sections.forEach(section => {
            if (section.ai_generated) {
              if (section.type === 'benefits') {
                section.title = 'Principais Benef√≠cios';
                section.items = [
                  { icon: 'üéØ', title: 'Resultado Eficaz', description: 'M√©todo comprovado e testado' },
                  { icon: '‚ö°', title: 'Processo R√°pido', description: 'Resultados em poucos dias' },
                  { icon: 'üöÄ', title: 'Suporte Completo', description: 'Acompanhamento especializado' },
                  { icon: 'üíé', title: 'Tecnologia Avan√ßada', description: 'Equipamentos de √∫ltima gera√ß√£o' },
                  { icon: 'üîí', title: 'Totalmente Seguro', description: 'Procedimento n√£o invasivo' },
                  { icon: '‚ú®', title: 'Experi√™ncia √önica', description: 'Abordagem personalizada' }
                ];
              } else if (section.type === 'faq') {
                section.title = 'Perguntas Frequentes';
                section.items = [
                  { 
                    question: 'Como funciona o tratamento?', 
                    answer: 'O tratamento utiliza tecnologia qu√¢ntica avan√ßada para identificar e harmonizar desequil√≠brios energ√©ticos de forma n√£o invasiva.' 
                  },
                  { 
                    question: 'Quanto tempo demora para ver resultados?', 
                    answer: 'Os primeiros resultados podem ser percebidos em poucos dias, mas o tempo varia de acordo com cada pessoa.' 
                  },
                  { 
                    question: '√â seguro?', 
                    answer: 'Sim, √© completamente seguro. O tratamento √© n√£o invasivo e n√£o apresenta efeitos colaterais.' 
                  },
                  { 
                    question: 'Preciso estar presente durante o tratamento?', 
                    answer: 'N√£o, o tratamento √© realizado √† dist√¢ncia atrav√©s da sua fotografia digital.' 
                  },
                  { 
                    question: 'Quantas sess√µes s√£o necess√°rias?', 
                    answer: 'O n√∫mero de sess√µes varia conforme a necessidade individual, sendo definido durante a consulta inicial.' 
                  }
                ];
              }
              delete section.ai_generated;
            }
          });
          
          // Salva o arquivo
          const cliente = process.env.CLIENTE || 'cliente';
          const lpNome = process.env.LP_NOME || 'lp';
          const fileName = `lps/${cliente}-${lpNome}/lp.json`;
          
          fs.writeFileSync(fileName, JSON.stringify(lpConfig, null, 2));
          console.log(`‚úÖ LP gerada: ${fileName}`);
          EOF2

          # Executa o processamento
          BRIEF_CONTENT="$BRIEF_CONTENT" CLIENTE="$CLIENTE" LP_NOME="$LP_NOME" node process_brief.js

          # Cria README para a LP
          cat > $LP_DIR/README.md << EOF3
          # Landing Page - ${SLUG}

          Criada em: $(date)
          Via Issue: #${{ github.event.issue.number }}
          Cliente: $CLIENTE
          Nome da LP: $LP_NOME

          ## Arquivos
          - \`lp.json\`: Configura√ß√£o da landing page

          ## URLs
          - Produ√ß√£o: https://nextjs-lp-template-three.vercel.app/${SLUG}
          - Desenvolvimento: http://localhost:3000/${SLUG}

          ## Se√ß√µes Inclu√≠das
          $(node -e "
            const lp = JSON.parse(require('fs').readFileSync('$LP_DIR/lp.json', 'utf8'));
            lp.sections.forEach(s => console.log('- ‚úÖ ' + s.type));
          ")

          ## Deploy
          Esta LP ser√° automaticamente deployada pela Vercel.
          EOF3

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: Add LP ${{ steps.process_brief.outputs.slug }}"
          title: "üöÄ Nova Landing Page: ${{ steps.process_brief.outputs.slug }}"
          body: |
            ## Nova Landing Page criada via Issue #${{ github.event.issue.number }}

            ### üìä Informa√ß√µes:
            - **Cliente**: `${{ steps.process_brief.outputs.cliente }}`
            - **Nome da LP**: `${{ steps.process_brief.outputs.lp_nome }}`
            - **Slug**: `${{ steps.process_brief.outputs.slug }}`

            ### üìÅ Arquivos criados:
            - ‚úÖ `/lps/${{ steps.process_brief.outputs.slug }}/lp.json`
            - ‚úÖ `/lps/${{ steps.process_brief.outputs.slug }}/README.md`

            ### üåê URL que ser√° ativada:
            - üîó `/${{ steps.process_brief.outputs.slug }}`

            ### üéØ Se√ß√µes processadas:
            $(echo '${{ steps.process_brief.outputs.brief_content }}' | grep -E '^(header|hero|benefits|services|testimonials|steps|about|faq|ctaFinal|footer)' | sed 's/^/- ‚úÖ /' || echo '- Processando se√ß√µes...')

            ### üìã Pr√≥ximos passos:
            1. Revise os arquivos criados
            2. Aprove este PR para fazer deploy
            3. A Issue ser√° fechada automaticamente
            4. A LP estar√° dispon√≠vel na URL acima

            ---
            *Criado automaticamente pelo LP Factory Bot V3* ü§ñ
          branch: ${{ steps.process_brief.outputs.branch_name }}
          delete-branch: true
          labels: |
            landing-page
            automated
            v3
          assignees: AlcinoAfonso

      - name: Comment on Issue
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = "${{ steps.cpr.outputs.pull-request-number }}";
            const prUrl = "${{ steps.cpr.outputs.pull-request-url }}";
            const slug = '${{ steps.process_brief.outputs.slug }}';
            const cliente = '${{ steps.process_brief.outputs.cliente }}';
            const lpNome = '${{ steps.process_brief.outputs.lp_nome }}';

            if (prNumber && prUrl) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚úÖ **Landing Page criada com sucesso!**\n\nüîó **PR #${prNumber}**: ${prUrl}\n\nüìä **Resumo:**\n- Cliente: \`${cliente}\`\n- Nome da LP: \`${lpNome}\`\n- Slug: \`${slug}\`\n\nüåê **URL da LP**: \`/${slug}\`\n\nüìã **Pr√≥ximos passos:**\n1. Revise o PR criado\n2. Aprove para fazer deploy\n3. A LP estar√° no ar automaticamente\n\n*Processamento autom√°tico conclu√≠do!* ‚ö°`
              });
            }

            // Fecha a Issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed',
              labels: ['processado', 'lp-v3']
            });
