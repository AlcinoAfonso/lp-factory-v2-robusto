name: Create LP Pull Request

on:
  issues:
    types: [opened]

jobs:
  create-lp-pr:
    if: startsWith(github.event.issue.title, '[DEPLOY]')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Extract client data
      id: extract
      uses: actions/github-script@v6
      with:
        script: |
          const issueTitle = context.payload.issue.title;
          const issueBody = context.payload.issue.body;
          
          // Extrai nome do cliente: [DEPLOY] cliente - Nome
          const match = issueTitle.match(/\[DEPLOY\]\s*(\w+)/);
          const clientId = match ? match[1].toLowerCase() : 'default';
          
          // Valida e extrai JSON
          let jsonData;
          try {
            jsonData = JSON.parse(issueBody);
          } catch (e) {
            throw new Error('JSON invÃ¡lido no corpo da Issue');
          }
          
          // Salva outputs
          core.setOutput('client_id', clientId);
          core.setOutput('json_data', JSON.stringify(jsonData));
          core.setOutput('branch_name', `lp-${clientId}-${Date.now()}`);
    
    - name: Create LP files
      run: |
        # VariÃ¡veis
        CLIENT_ID="${{ steps.extract.outputs.client_id }}"
        JSON_DATA='${{ steps.extract.outputs.json_data }}'
        
        # Cria estrutura de pastas
        mkdir -p lps/$CLIENT_ID
        
        # Salva o JSON do cliente
        echo "$JSON_DATA" > lps/$CLIENT_ID/lp.json
        
        # Atualiza o lp.json principal (opcional)
        echo "$JSON_DATA" > lp.json
        
        # Cria um README para o cliente
        cat > lps/$CLIENT_ID/README.md << EOF
        # Landing Page - $CLIENT_ID
        
        Criada em: $(date)
        Via Issue: #${{ github.event.issue.number }}
        
        ## Arquivos
        - \`lp.json\`: ConfiguraÃ§Ã£o da landing page
        
        ## Deploy
        Esta LP serÃ¡ automaticamente deployada pela Vercel.
        EOF
    
    - name: Create Pull Request
      id: cpr
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "feat: Add LP for ${{ steps.extract.outputs.client_id }}"
        title: "ðŸš€ Nova Landing Page: ${{ steps.extract.outputs.client_id }}"
        body: |
          ## Nova Landing Page criada via Issue #${{ github.event.issue.number }}
          
          ### Cliente: `${{ steps.extract.outputs.client_id }}`
          
          ### Arquivos criados:
          - âœ… `/lps/${{ steps.extract.outputs.client_id }}/lp.json`
          - âœ… `/lps/${{ steps.extract.outputs.client_id }}/README.md`
          - âœ… `/lp.json` (atualizado)
          
          ### PrÃ³ximos passos:
          1. Revise os arquivos criados
          2. Aprove este PR para fazer deploy
          3. A Issue serÃ¡ fechada automaticamente
          
          ---
          *Criado automaticamente pelo LP Factory Bot* ðŸ¤–
        branch: ${{ steps.extract.outputs.branch_name }}
        delete-branch: true
        labels: |
          landing-page
          automated
        assignees: AlcinoAfonso
    
    - name: Comment on Issue
      uses: actions/github-script@v6
      with:
        script: |
          const prNumber = ${{ steps.cpr.outputs.pull-request-number }};
          const prUrl = ${{ steps.cpr.outputs.pull-request-url }};
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `âœ… Pull Request criado com sucesso!\n\nðŸ”— **PR #${prNumber}**: ${prUrl}\n\nRevise e aprove o PR para fazer deploy da landing page.`
          });
          
          // Fecha a Issue
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            state: 'closed',
            labels: ['processado']
          });
