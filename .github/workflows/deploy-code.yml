name: 🚀 Deploy Código Automaticamente

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'O que você está implementando? (ex: LP FitNutri - Lote 1)'
        required: true
        type: string
        default: 'Implementar nova funcionalidade'
      claude_response:
        description: 'Cole aqui EXATAMENTE o que o Claude escreveu'
        required: true
        type: string
        default: |
          Exemplo:
          **Arquivo: src/components/Example.tsx**
          ```tsx
          import React from 'react';
          export default function Example() {
            return <div>Hello World</div>;
          }
          ```

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔧 Configurar Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Claude Deploy Bot"
      
      - name: 🌿 Criar branch
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="claude-deploy-$TIMESTAMP"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b "$BRANCH_NAME"
          echo "✅ Branch criada: $BRANCH_NAME"
      
      - name: 📝 Processar resposta do Claude
        run: |
          echo "🔄 Processando resposta do Claude..."
          
          cat > claude_response.txt << 'EOF'
          ${{ inputs.claude_response }}
          EOF
          
          echo "📄 Resposta salva. Tamanho: $(wc -c < claude_response.txt) caracteres"
          echo "🔍 Primeiras linhas:"
          head -5 claude_response.txt
      
      - name: 🛠️ Extrair arquivos
        run: |
          echo "🚀 Iniciando extração..."
          
          python3 << 'PYTHON_SCRIPT'
          import re
          import os
          
          def extract_files(content):
              files = []
              lines = content.split('\n')
              current_file = None
              in_code_block = False
              code_lines = []
              
              for line in lines:
                  line_stripped = line.strip()
                  
                  # Detectar arquivo: **Arquivo: path** ou Arquivo: path
                  if '**Arquivo:' in line or line.startswith('Arquivo:'):
                      if current_file and code_lines:
                          files.append({
                              'path': current_file,
                              'content': '\n'.join(code_lines)
                          })
                          code_lines = []
                      
                      # Extrair path do arquivo
                      if '**Arquivo:' in line:
                          current_file = line.split('**Arquivo:')[1].split('**')[0].strip()
                      else:
                          current_file = line.split('Arquivo:')[1].strip()
                      
                      print(f"📁 Arquivo encontrado: {current_file}")
                      continue
                  
                  # Detectar início de bloco de código
                  if line_stripped.startswith('```'):
                      if not in_code_block:
                          in_code_block = True
                          continue
                      else:
                          in_code_block = False
                          continue
                  
                  # Coletar linhas de código
                  if in_code_block and current_file:
                      code_lines.append(line)
              
              # Adicionar último arquivo se existir
              if current_file and code_lines:
                  files.append({
                      'path': current_file,
                      'content': '\n'.join(code_lines)
                  })
              
              return files
          
          # Ler arquivo
          with open('claude_response.txt', 'r', encoding='utf-8') as f:
              content = f.read()
          
          # Extrair arquivos
          files = extract_files(content)
          
          if not files:
              print("❌ Nenhum arquivo encontrado!")
              print("Formato esperado:")
              print("**Arquivo: caminho/arquivo.ext**")
              print("```linguagem")
              print("código aqui")
              print("```")
              exit(1)
          
          print(f"📦 {len(files)} arquivos encontrados")
          
          # Criar arquivos
          created = []
          for file_info in files:
              path = file_info['path']
              content = file_info['content']
              
              # Criar diretório
              os.makedirs(os.path.dirname(path), exist_ok=True)
              
              # Criar arquivo
              with open(path, 'w', encoding='utf-8') as f:
                  f.write(content)
              
              created.append(path)
              print(f"✅ Criado: {path}")
          
          # Salvar lista
          with open('created_files.txt', 'w') as f:
              for path in created:
                  f.write(f"{path}\n")
          
          print(f"🎉 Concluído! {len(created)} arquivos criados")
          PYTHON_SCRIPT
      
      - name: ✅ Verificar arquivos
        run: |
          echo "📋 Arquivos criados:"
          if [ -f created_files.txt ]; then
            while read -r file; do
              if [ -f "$file" ]; then
                echo "  ✅ $file ($(wc -l < "$file") linhas)"
              else
                echo "  ❌ $file (erro)"
              fi
            done < created_files.txt
          else
            echo "❌ Nenhum arquivo criado"
            exit 1
          fi
      
      - name: 📦 Commit
        run: |
          git add .
          
          if git diff --staged --quiet; then
            echo "❌ Nenhuma mudança para commit"
            exit 1
          fi
          
          git commit -m "🤖 ${{ inputs.description }}

          Arquivos criados automaticamente:
          $(cat created_files.txt | sed 's/^/- /')
          
          Data: $(date)"
          
          echo "✅ Commit realizado"
      
      - name: 🚀 Push
        run: |
          git push origin $BRANCH_NAME
          echo "✅ Branch enviada: $BRANCH_NAME"
      
      - name: 📋 Criar PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let filesList = '';
            try {
              const files = fs.readFileSync('created_files.txt', 'utf8').trim().split('\n');
              filesList = files.map(file => `- \`${file}\``).join('\n');
            } catch (e) {
              filesList = '- Nenhum arquivo detectado';
            }
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🤖 ${{ inputs.description }}',
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: `## 🤖 Deploy Automático

            **Descrição:** ${{ inputs.description }}
            **Branch:** \`${process.env.BRANCH_NAME}\`
            **Data:** ${new Date().toLocaleString('pt-BR')}

            ### 📁 Arquivos criados:
            ${filesList}

            ### ✅ Checklist:
            - [ ] Código revisado
            - [ ] Testado localmente
            - [ ] Pronto para merge

            ---
            *Gerado automaticamente pelo Claude Deploy System*`
            });
            
            console.log(\`✅ PR criado: #\${pr.number}\`);
            console.log(\`🔗 URL: \${pr.html_url}\`);
      
      - name: 🎉 Sucesso
        run: |
          echo ""
          echo "🎉 ===== DEPLOY CONCLUÍDO! ====="
          echo ""
          echo "✅ Branch: $BRANCH_NAME"
          echo "✅ Arquivos: $(wc -l < created_files.txt)"
          echo "✅ Pull Request criado"
          echo ""
          echo "🔄 Próximos passos:"
          echo "1. Vá em Pull requests"
          echo "2. Revise o código"
          echo "3. Faça merge"
          echo ""
