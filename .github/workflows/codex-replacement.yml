name: Codex Replacement - Manual Code Distribution

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Descri√ß√£o das mudan√ßas (ex: Implementar sistema de LP completo)'
        required: true
        type: string
      final_batch:
        description: '√â a √∫ltima parte? (marca quando terminar)'
        required: false
        type: boolean
        default: false
      files_json:
        description: 'JSON com arquivos e c√≥digos (Cole a parte do Claude aqui)'
        required: true
        type: string
        default: |
          {
            "src/components/NewComponent.tsx": "// Cole o c√≥digo do componente aqui\nimport React from 'react';\n\nexport default function NewComponent() {\n  return <div>Novo Componente</div>;\n}",
            "src/types/new-types.ts": "// Cole os tipos aqui\nexport interface NewType {\n  id: string;\n  name: string;\n}"
          }

jobs:
  distribute-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Code Distribution Bot"
          
      - name: Create or update branch
        run: |
          BRANCH_NAME="feature/$(echo '${{ github.event.inputs.description }}' | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          # Verificar se branch existe
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "Branch existe, fazendo checkout"
            git fetch origin $BRANCH_NAME
            git checkout $BRANCH_NAME
          else
            echo "Criando nova branch"
            git checkout -b $BRANCH_NAME
          fi
          
      - name: Validate JSON
        run: |
          echo '${{ github.event.inputs.files_json }}' > temp_files.json
          if ! jq empty temp_files.json; then
            echo "‚ùå ERRO: JSON inv√°lido!"
            echo "Verifique a sintaxe do JSON dos arquivos"
            exit 1
          fi
          echo "‚úÖ JSON v√°lido"
          
      - name: Create/Update files
        run: |
          echo "üìÅ Processando arquivos do lote ${{ steps.extract.outputs.batch_info }}..."
          
          # Processar cada arquivo do JSON
          jq -r 'to_entries[] | "\(.key)|||SEPARATOR|||\(.value)"' temp_files.json | while IFS='|||SEPARATOR|||' read -r filepath content; do
            echo "üìù Processando: $filepath"
            
            # Criar diret√≥rio se n√£o existir
            mkdir -p "$(dirname "$filepath")"
            
            # Decodificar conte√∫do (lidar com quebras de linha)
            echo -e "$content" > "$filepath"
            
            echo "‚úÖ Arquivo criado/atualizado: $filepath"
            
            # Mostrar preview do arquivo (primeiras 5 linhas)
            echo "üìÑ Preview de $filepath:"
            head -n 5 "$filepath" || echo "Arquivo vazio ou bin√°rio"
            echo "---"
          done
          
          # Limpar arquivo tempor√°rio
          rm temp_files.json
          
      - name: Show changes summary
        run: |
          echo "üìä RESUMO DAS MUDAN√áAS:"
          echo "======================"
          echo "Descri√ß√£o: ${{ github.event.inputs.description }}"
          echo "Lote: ${{ steps.extract.outputs.batch_info }}"
          echo "Branch: ${{ env.BRANCH_NAME }}"
          echo ""
          echo "üìÅ Arquivos modificados:"
          git status --porcelain | head -20
          echo ""
          echo "üìà Estat√≠sticas:"
          echo "Arquivos alterados: $(git status --porcelain | wc -l)"
          echo "Linhas adicionadas: $(git diff --cached --numstat 2>/dev/null | awk '{sum+=$1} END {print sum+0}')"
          
      - name: Commit changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            if [ "${{ github.event.inputs.final_batch }}" = "true" ]; then
              git commit -m "‚úÖ Implementa√ß√£o completa"
            else
              git commit -m "üì¶ Adicionando arquivos"
            fi
            echo "‚úÖ Commit realizado com sucesso"
          else
            echo "‚ÑπÔ∏è Nenhuma mudan√ßa detectada para commit"
          fi
          
      - name: Push changes
        run: |
          git push origin ${{ env.BRANCH_NAME }}
          echo "üöÄ Mudan√ßas enviadas para branch: ${{ env.BRANCH_NAME }}"
          
      - name: Create or update Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "üöÄ ${{ github.event.inputs.description }}"
          body: |
            ## üìã Implementa√ß√£o por Lotes
            
            **Descri√ß√£o:** ${{ github.event.inputs.description }}
            
            **Progresso:** Lote ${{ steps.extract.outputs.batch_info }} ‚úÖ
            
            ### üìä Status do Projeto:
            - Lote atual: **${{ steps.extract.outputs.current_batch }}/${{ steps.extract.outputs.total_batches }}**
            - Total de lotes: **${{ steps.extract.outputs.total_batches }}**
            - Status: ${{ steps.extract.outputs.current_batch == steps.extract.outputs.total_batches && 'üéâ **COMPLETO!**' || 'üîÑ Em andamento...' }}
            
            ### üìÅ Arquivos neste lote:
            ```json
            ${{ github.event.inputs.files_json }}
            ```
            
            ### ‚úÖ Checklist p√≥s-implementa√ß√£o:
            - [ ] C√≥digo compila sem erros
            - [ ] Funcionalidade testada
            - [ ] Responsividade verificada  
            - [ ] Performance analisada
            - [ ] Acessibilidade validada
            - [ ] Documenta√ß√£o atualizada
            
            ### üîÑ Pr√≥ximos passos:
            ${{ steps.extract.outputs.current_batch == steps.extract.outputs.total_batches && '‚úÖ **IMPLEMENTA√á√ÉO COMPLETA!** Pronto para review final e merge.' || format('‚è≠Ô∏è Executar lote {0}/{1} com os pr√≥ximos arquivos', fromJSON(steps.extract.outputs.current_batch) + 1, steps.extract.outputs.total_batches) }}
            
            ---
            
            > ü§ñ **Gerado automaticamente** - Substituto do Codex  
            > Branch: `${{ env.BRANCH_NAME }}`
            
          delete-branch: false
          
      - name: Success summary
        run: |
          echo "üéâ LOTE ${{ steps.extract.outputs.batch_info }} PROCESSADO COM SUCESSO!"
          echo "=============================================="
          echo "‚úÖ Branch: ${{ env.BRANCH_NAME }}"
          echo "‚úÖ Arquivos distribu√≠dos automaticamente"
          echo "‚úÖ Pull Request criado/atualizado"
          echo ""
          if [ "${{ steps.extract.outputs.current_batch }}" = "${{ steps.extract.outputs.total_batches }}" ]; then
            echo "üèÅ IMPLEMENTA√á√ÉO COMPLETA!"
            echo "Todos os ${{ steps.extract.outputs.total_batches }} lotes foram processados."
            echo "Pronto para review final e merge."
          else
            NEXT_BATCH=$(($(echo "${{ steps.extract.outputs.current_batch }}") + 1))
            echo "‚è≠Ô∏è PR√ìXIMO PASSO:"
            echo "Execute o lote $NEXT_BATCH/${{ steps.extract.outputs.total_batches }} com os pr√≥ximos arquivos do Claude"
          fi
