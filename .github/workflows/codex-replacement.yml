name: Codex Replacement - Manual Code Distribution

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Descri√ß√£o das mudan√ßas (ex: Implementar sistema de LP completo)'
        required: true
        type: string
      final_batch:
        description: '√â a √∫ltima parte? (marca quando terminar)'
        required: false
        type: boolean
        default: false
      files_json:
        description: 'JSON com arquivos e c√≥digos (Cole a parte do Claude aqui)'
        required: true
        type: string
        default: |
          {
            "src/components/NewComponent.tsx": "// Cole o c√≥digo do componente aqui\nimport React from 'react';\n\nexport default function NewComponent() {\n  return <div>Novo Componente</div>;\n}",
            "src/types/new-types.ts": "// Cole os tipos aqui\nexport interface NewType {\n  id: string;\n  name: string;\n}"
          }

jobs:
  distribute-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Code Distribution Bot"
          
      - name: Create branch name
        run: |
          DESCRIPTION="${{ github.event.inputs.description }}"
          BRANCH_NAME="feature/$(echo "$DESCRIPTION" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "Branch name: $BRANCH_NAME"
          
      - name: Create or update branch
        run: |
          # Verificar se branch existe
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "Branch existe, fazendo checkout"
            git fetch origin $BRANCH_NAME
            git checkout $BRANCH_NAME
          else
            echo "Criando nova branch"
            git checkout -b $BRANCH_NAME
          fi
          
      - name: Validate JSON
        run: |
          echo '${{ github.event.inputs.files_json }}' > temp_files.json
          if ! cat temp_files.json | python3 -m json.tool > /dev/null; then
            echo "‚ùå ERRO: JSON inv√°lido!"
            echo "Verifique a sintaxe do JSON dos arquivos"
            exit 1
          fi
          echo "‚úÖ JSON v√°lido"
          
      - name: Create/Update files
        run: |
          echo "üìÅ Processando arquivos..."
          
          # Usar Python para processar JSON (mais confi√°vel que jq)
          python3 << 'EOF'
          import json
          import os
          
          # Ler JSON dos arquivos
          with open('temp_files.json', 'r') as f:
              files_data = json.load(f)
          
          # Processar cada arquivo
          for filepath, content in files_data.items():
              print(f"üìù Processando: {filepath}")
              
              # Criar diret√≥rio se n√£o existir
              dir_path = os.path.dirname(filepath)
              if dir_path:
                  os.makedirs(dir_path, exist_ok=True)
              
              # Escrever arquivo
              with open(filepath, 'w', encoding='utf-8') as f:
                  f.write(content)
              
              print(f"‚úÖ Arquivo criado/atualizado: {filepath}")
              
              # Mostrar preview (primeiras 3 linhas)
              print(f"üìÑ Preview de {filepath}:")
              try:
                  with open(filepath, 'r', encoding='utf-8') as f:
                      lines = f.readlines()[:3]
                      for line in lines:
                          print(line.rstrip())
              except:
                  print("Arquivo bin√°rio ou erro de leitura")
              print("---")
          EOF
          
          # Limpar arquivo tempor√°rio
          rm -f temp_files.json
          
      - name: Show changes summary
        run: |
          echo "üìä RESUMO DAS MUDAN√áAS:"
          echo "======================"
          echo "Descri√ß√£o: ${{ github.event.inputs.description }}"
          echo "√â lote final: ${{ github.event.inputs.final_batch }}"
          echo "Branch: ${{ env.BRANCH_NAME }}"
          echo ""
          echo "üìÅ Arquivos modificados:"
          git status --porcelain
          echo ""
          echo "üìà Estat√≠sticas:"
          echo "Arquivos alterados: $(git status --porcelain | wc -l)"
          
      - name: Commit changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            if [ "${{ github.event.inputs.final_batch }}" = "true" ]; then
              git commit -m "‚úÖ ${{ github.event.inputs.description }} - Implementa√ß√£o completa"
            else
              git commit -m "üì¶ ${{ github.event.inputs.description }} - Lote em andamento"
            fi
            echo "‚úÖ Commit realizado com sucesso"
          else
            echo "‚ÑπÔ∏è Nenhuma mudan√ßa detectada para commit"
          fi
          
      - name: Push changes
        run: |
          git push origin ${{ env.BRANCH_NAME }}
          echo "üöÄ Mudan√ßas enviadas para branch: ${{ env.BRANCH_NAME }}"
          
      - name: Create or update Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "üöÄ ${{ github.event.inputs.description }}"
          body: |
            ## üìã Implementa√ß√£o Autom√°tica
            
            **Descri√ß√£o:** ${{ github.event.inputs.description }}
            
            ### üìä Status do Projeto:
            - Lote atual: Em andamento
            - √â lote final: ${{ github.event.inputs.final_batch }}
            
            ### üìÅ Arquivos processados:
            ```json
            ${{ github.event.inputs.files_json }}
            ```
            
            ### ‚úÖ Checklist p√≥s-implementa√ß√£o:
            - [ ] C√≥digo compila sem erros
            - [ ] Funcionalidade testada
            - [ ] Responsividade verificada  
            - [ ] Performance analisada
            - [ ] Acessibilidade validada
            - [ ] Documenta√ß√£o atualizada
            
            ### üîÑ Pr√≥ximos passos:
            ${{ github.event.inputs.final_batch == 'true' && '‚úÖ **IMPLEMENTA√á√ÉO COMPLETA!** Pronto para review final e merge.' || '‚è≠Ô∏è Executar pr√≥ximo lote com os arquivos restantes' }}
            
            ---
            
            > ü§ñ **Gerado automaticamente** - Substituto do Codex  
            > Branch: `${{ env.BRANCH_NAME }}`
            
          delete-branch: false
          
      - name: Success summary
        run: |
          echo "üéâ LOTE PROCESSADO COM SUCESSO!"
          echo "=============================="
          echo "‚úÖ Branch: ${{ env.BRANCH_NAME }}"
          echo "‚úÖ Arquivos distribu√≠dos automaticamente"
          echo "‚úÖ Pull Request criado/atualizado"
          echo ""
          if [ "${{ github.event.inputs.final_batch }}" = "true" ]; then
            echo "üèÅ IMPLEMENTA√á√ÉO COMPLETA!"
            echo "Pronto para review final e merge."
          else
            echo "‚è≠Ô∏è PR√ìXIMO PASSO:"
            echo "Execute o pr√≥ximo lote com os arquivos restantes do Claude"
          fi
