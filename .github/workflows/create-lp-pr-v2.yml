name: Create Multi-Funnel LP Pull Request

on:
  issues:
    types: [opened]

jobs:
  create-funnel-lp-pr:
    if: startsWith(github.event.issue.title, '[DEPLOY]')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract client data and funnel stages
        id: extract
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = context.payload.issue.title;
            const issueBody = context.payload.issue.body;

            // Extrai nome do cliente: [DEPLOY] cliente - Nome
            const match = issueTitle.match(/\[DEPLOY\]\s*(\w+)/);
            const clientId = match ? match[1].toLowerCase() : 'default';

            // Valida e extrai JSON
            let jsonData;
            try {
              jsonData = JSON.parse(issueBody);
            } catch (e) {
              throw new Error('JSON inválido no corpo da Issue');
            }

            // Extrai etapas do funil
            const etapas = jsonData.etapas || ['bofu']; // Default só vendas
            const validEtapas = etapas.filter(e => ['tofu', 'mofu', 'bofu'].includes(e));

            if (validEtapas.length === 0) {
              throw new Error('Nenhuma etapa válida especificada');
            }

            // Calcula preços
            const precos = { tofu: 297, mofu: 397, bofu: 497 };
            const total = validEtapas.reduce((sum, etapa) => sum + precos[etapa], 0);
            const pacote = 797;
            const economia = total - pacote;

            // Salva outputs
            core.setOutput('client_id', clientId);
            core.setOutput('etapas', JSON.stringify(validEtapas));
            core.setOutput('json_data', JSON.stringify(jsonData));
            core.setOutput('total_individual', total);
            core.setOutput('total_pacote', pacote);
            core.setOutput('economia', economia);
            core.setOutput('branch_name', `lp-${clientId}-${Date.now()}`);

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Create Funnel LPs
        run: |
          CLIENT_ID="${{ steps.extract.outputs.client_id }}"
          ETAPAS='${{ steps.extract.outputs.etapas }}'
          JSON_DATA='${{ steps.extract.outputs.json_data }}'

          echo "Criando LPs para cliente: $CLIENT_ID"
          echo "Etapas: $ETAPAS"

          # Parse das etapas
          ETAPAS_ARRAY=$(echo $ETAPAS | jq -r '.[]')

          for ETAPA in $ETAPAS_ARRAY; do
            echo "Criando LP para etapa: $ETAPA"

            # Cria estrutura de pastas
            LP_DIR="lps/${CLIENT_ID}-${ETAPA}"
            mkdir -p $LP_DIR

            # Processa template da etapa
            node -e "
              const fs = require('fs');
              const path = require('path');

              // Carrega template da etapa
              const templatePath = path.join('templates', 'bases', '$ETAPA.json');
              const template = JSON.parse(fs.readFileSync(templatePath, 'utf8'));

              // Carrega dados do cliente
              const clientData = $JSON_DATA;

              // Processa template (substituição simples por enquanto)
              let templateStr = JSON.stringify(template);
              Object.entries(clientData).forEach(([key, value]) => {
                const regex = new RegExp('{{' + key + '}}', 'g');
                templateStr = templateStr.replace(regex, String(value));
              });

              // Remove variáveis não substituídas
              templateStr = templateStr.replace(/{{[^}]+}}/g, 'PENDENTE');

              // Salva LP processada
              fs.writeFileSync(path.join('$LP_DIR', 'lp.json'), templateStr);
            "

            # Cria README para a LP
            cat > $LP_DIR/README.md << EOF2
          # Landing Page - ${CLIENT_ID}-${ETAPA}

          Criada em: $(date)
          Via Issue: #${{ github.event.issue.number }}
          Etapa do Funil: ${ETAPA^^}
          Cliente: $CLIENT_ID

          ## Arquivos
          - \`lp.json\`: Configuração da landing page

          ## URLs
          - Produção: https://seusite.com/${CLIENT_ID}-${ETAPA}
          - Desenvolvimento: http://localhost:3000/${CLIENT_ID}-${ETAPA}

          ## Preço
EOF2

            case $ETAPA in
              "tofu") echo "- R$ 297 (Captura de Leads)" >> $LP_DIR/README.md ;;
              "mofu") echo "- R$ 397 (Nutrição)" >> $LP_DIR/README.md ;;
              "bofu") echo "- R$ 497 (Vendas)" >> $LP_DIR/README.md ;;
            esac

            echo "" >> $LP_DIR/README.md
            echo "## Deploy" >> $LP_DIR/README.md
            echo "Esta LP será automaticamente deployada pela Vercel." >> $LP_DIR/README.md

          done

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: Add Funnel LPs for ${{ steps.extract.outputs.client_id }}"
          title: "🚀 Funil Completo: ${{ steps.extract.outputs.client_id }}"
          body: |
            ## Novo Funil de Landing Pages criado via Issue #${{ github.event.issue.number }}

            ### Cliente: `${{ steps.extract.outputs.client_id }}`
            ### Etapas Criadas: ${{ steps.extract.outputs.etapas }}

            ### 💰 Investimento:
            - **Individual**: R$ ${{ steps.extract.outputs.total_individual }}
            - **Pacote Completo**: R$ ${{ steps.extract.outputs.total_pacote }}
            - **Economia**: R$ ${{ steps.extract.outputs.economia }}

            ### 📁 Arquivos criados:
            $(echo '${{ steps.extract.outputs.etapas }}' | jq -r '.[] | "- ✅ `/lps/${{ steps.extract.outputs.client_id }}-" + . + "/`"')

            ### 🌐 URLs que serão ativadas:
            $(echo '${{ steps.extract.outputs.etapas }}' | jq -r '.[] | "- 🔗 `/${{ steps.extract.outputs.client_id }}-" + . + "`"')

            ### Próximos passos:
            1. Revise os arquivos criados
            2. Aprove este PR para fazer deploy
            3. A Issue será fechada automaticamente
            4. Cliente receberá acesso às URLs

            ---
            *Criado automaticamente pelo LP Factory Bot* 🤖
          branch: ${{ steps.extract.outputs.branch_name }}
          delete-branch: true
          labels: |
            landing-page
            funnel
            automated
          assignees: AlcinoAfonso

      - name: Comment on Issue
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = "${{ steps.cpr.outputs.pull-request-number }}";
            const prUrl = "${{ steps.cpr.outputs.pull-request-url }}";
            const etapas = JSON.parse('${{ steps.extract.outputs.etapas }}');
            const cliente = '${{ steps.extract.outputs.client_id }}';

            let urlsList = etapas.map(etapa => `- 🔗 **${etapa.toUpperCase()}**: \`/${cliente}-${etapa}\``).join('\n');

            if (prNumber && prUrl) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `✅ **Funil de Landing Pages criado com sucesso!**\n\n🔗 **PR #${prNumber}**: ${prUrl}\n\n📊 **Resumo do Pedido:**\n- Cliente: \`${cliente}\`\n- Etapas: ${etapas.join(', ').toUpperCase()}\n- Total Individual: R$ ${{ steps.extract.outputs.total_individual }}\n- Pacote Completo: R$ ${{ steps.extract.outputs.total_pacote }}\n- Economia: R$ ${{ steps.extract.outputs.economia }}\n\n🌐 **URLs que serão ativadas:**\n${urlsList}\n\nRevise e aprove o PR para fazer deploy das landing pages.`
              });
            }

            // Fecha a Issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed',
              labels: ['processado', 'funil-completo']
            });
